#! /bin/bash

#####################################
# Automatically do a clean build of #
# LLVM trunk and then of Byfl       #
#                                   #
# By Scott Pakin <pakin@lanl.gov>   #
#####################################

# Determine where to build, where to install, and how many processes to use.
gui=yes
download=yes
compile=yes
while getopts j:b:tdc opt; do
    case $opt in
	j)
	    # Parallelism
	    numprocs="$OPTARG"
	    ;;

	b)
	    # Build directory
	    builddir="$OPTARG"
	    ;;
	t)
	    # Show progress textually
	    gui=no
	    ;;
	d)
	    # Download only
	    download=yes
	    compile=no
	    ;;
	c)
	    # Compile only
	    compile=yes
	    download=no
	    ;;
    esac
done
shift $((OPTIND-1))
if [ -z "$1" ] ; then
    echo "Usage: $0 [-j <parallelism> [-b <build_dir>] [-t] [-d | -c] <install_dir>" >&2
    exit 1
fi
installdir=`readlink -f "$1"`
if [ -z "$builddir" ] ; then
    builddir=$(mktemp --directory --tmpdir=$(/bin/pwd) byfl-build.XXXXXX)
fi
builddir=`readlink -f "$builddir"`
if [ -z "$numprocs" ] ; then
    numprocs=`cat /proc/cpuinfo | egrep -c '^processor'`
fi

# Ensure we have a version of GCC that works with DragonEgg.
gcc_version=`gcc --version | awk 'NR == 1 {print $3}'`
if `echo $gcc_version | awk '!/^4\.[567]\./ {exit 1}'` ; then
    :
else
    echo "${0}: DragonEgg requires GCC version 4.5, 4.6, or 4.7; version $gcc_version almost certainly won't work" 1>&2
    exit 1
fi

# Prepare the GUI.
if [ "$gui" = yes ] ; then
    if [ ! `type -P stdbuf` ] ; then
	gui=no
    elif [ ! `type -P zenity` ] ; then
	gui=no
    fi
fi
if [ "$gui" = yes ] ; then
    coproc zproc {
	zenity --progress --title="Byfl installation progress" --auto-kill
    }
    while [ -z "$zenity_pid" ] ; do
	zenity_pid=`ps | awk '$NF == "zenity" {print $1}'`
	sleep 1
    done
    function abend () {
	test -z "$zproc_PID" || kill $zproc_PID
	zenity --error --title="Fail" --text="Installation failed."
	exit 1
    }
    trap abend ERR
else
    zproc=(0, 1)
fi
exec 4>&${zproc[1]}

# Define a function to update a progress bar during command execution
# given an expected number of lines of output and a command to run.
function run_with_progress () {
    maxlines="$1"
    shift
    if [ "$gui" = yes ] ; then
	# Estimate the number of lines of output we'll see.
	echo 0 1>&4
	"$@" | \
	    stdbuf -oL awk '{printf "%d\n", 100*NR/MAXLN; print > "/dev/stderr"}' MAXLN=$maxlines | \
	    stdbuf -oL uniq 1>&4
	echo 100 1>&4
    else
	"$@"
    fi
}

# Abort on error.
set -e

# Switch to our build directory
test -e "$builddir" || mkdir "$builddir"
cd "$builddir"

# Download LLVM, Clang, DragonEgg, and Byfl.
if [ "$download" = yes ] ; then
    # Delete old files before downloading the new ones.
    echo "# Removing old versions of LLVM, Clang, DragonEgg, and Byfl from $builddir" 1>&4
    run_with_progress 64000 rm -rfv byfl dragonegg llvm

    # Download LLVM trunk.
    echo "# Downloading LLVM into $builddir" 1>&4
    run_with_progress 11000 svn checkout http://llvm.org/svn/llvm-project/llvm/trunk llvm
    cd llvm
    llvm_revision=`svn info | awk '/^Revision: / {print $2}'`
    cd ..

    # Download Clang.
    echo "# Downloading Clang revision $llvm_revision into $builddir" 1>&4
    run_with_progress 8300 svn checkout -r $llvm_revision http://llvm.org/svn/llvm-project/cfe/trunk llvm/tools/clang

    # Download the Clang run-time system.
    echo "# Downloading Clang RT revision $llvm_revision into $builddir" 1>&4
    run_with_progress 1100 svn checkout -r $llvm_revision http://llvm.org/svn/llvm-project/compiler-rt/trunk llvm/projects/compiler-rt

    # Download DragonEgg.
    echo "# Downloading DragonEgg revision $llvm_revision into $builddir" 1>&4
    run_with_progress 400 svn checkout http://llvm.org/svn/llvm-project/dragonegg/trunk dragonegg

    # Download Byfl.
    echo "# Downloading Byfl into $builddir" 1>&4
    run_with_progress 7 git clone https://github.com/losalamos/Byfl.git byfl

    # Say what we did.
    echo "Downloaded LLVM, Clang, DragonEgg, and Byfl into $builddir."
    if [ "$gui" = yes ] ; then
	kill $zenity_pid
	zenity --info --title="Finished downloading" --text="Downloaded LLVM, Clang, DragonEgg,\nand Byfl into $builddir."
    fi
fi

# Compile and install everything we downloaded.
if [ "$compile" = yes ] ; then
    # Configure LLVM and Clang.
    echo "# Configuring LLVM and Clang" 1>&4
    cd llvm
    run_with_progress 700 ./configure --prefix="$installdir" --enable-optimized --enable-debug-runtime --enable-debug-symbols --disable-assertions CC=gcc CXX=g++ REQUIRES_RTTI=1

    # Build LLVM and Clang.
    echo "# Compiling LLVM and Clang" 1>&4
    run_with_progress 2800 make -j$numprocs

    # Install LLVM and Clang.
    echo "# Installing LLVM and Clang into $installdir" 1>&4
    run_with_progress 800 make install

    # Build DragonEgg.
    export PATH=$installdir/bin:$PATH
    cd ../dragonegg
    echo "# Compiling DragonEgg" 1>&4
    run_with_progress 100 make -j$numprocs

    # Install DragonEgg.
    echo "# Installing DragonEgg into $installdir" 1>&4
    run_with_progress 1 cp -v dragonegg.so $installdir/lib

    # Configure Byfl.
    echo "# Configuring Byfl" 1>&4
    cd ../byfl/autoconf
    (echo $builddir_llvm ; echo $builddir_llvm) | ./AutoRegen.sh
    test -e ../build || mkdir ../build
    cd ../build
    run_with_progress 400 ../configure --disable-assertions --enable-optimized --enable-debug-runtime --enable-debug-symbols DRAGONEGG="$installdir/lib/dragonegg.so" CXX=g++ CXXFLAGS="-g -O2 -std=c++0x" --with-llvmsrc="$builddir/llvm" --with-llvmobj="$builddir/llvm" --prefix="$installdir"

    # Build Byfl.
    echo "# Compiling Byfl" 1>&4
    run_with_progress 50 make -j$numprocs

    # Install Byfl.
    echo "# Installing Byfl into $installdir" 1>&4
    run_with_progress 50 make install

    # Test the installation
    echo "# Testing the Byfl installation" 1>&4
    test "$gui" = yes && echo 0 1>&4
    byflperllib=$(dirname $(find $installdir -name ParseGccOpts.pm))
    cfile=`mktemp --tmpdir --suffix=.c byfltest-XXXXXX`
    exefile=`echo $cfile | sed 's/\.c$//'`
    cat <<CFILE > $cfile
#include <stdio.h>
int main (void) {
  printf("Hello, world!\n");
  return 0;
}
CFILE
    export PERLLIB=${byflperllib}:$PERLLIB
    bf-gcc $cfile -o $exefile
    run_with_progress 15 $exefile
    rm -f $cfile $exefile

    # Say what we did.
    echo "Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir."
    echo "It is now safe to delete $builddir."
    echo "Don't forget to add $byflperllib to your PERLLIB variable."
    if [ "$gui" = yes ] ; then
	kill $zenity_pid
	zenity --info --title="Finished installation" --text="Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir.\n\nIt is now safe to delete $builddir.\nDon't forget to add $byflperllib to your PERLLIB variable."
    fi
fi
