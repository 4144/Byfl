#! /bin/bash

##########################################
# Automatically do a clean build of      #
# LLVM 3.5, Clang 3.5, and DragonEgg 3.5 #
# and then of Byfl's llvm-3.5 branch     #
#                                        #
# By Scott Pakin <pakin@lanl.gov>        #
##########################################

# Ensure we have a version of bash that can parse the rest of this
# file (specifically, the coproc statement).
if [ "${BASH_VERSION/.*/}" -lt 4 ] ; then
    echo "${0}: This script requires bash version 4+; you're running version $BASH_VERSION" 1>&2;
    exit 1
fi

# Define a function to work around OS X's lack of "readlink -f".
function abs_dirname() {
    somedir=$(echo "$1/" | sed 's,//*,/,g')
    if [ "${somedir:0:1}" = "/" ] ; then
        echo "$somedir"
    else
        mkdir -p "$somedir" > /dev/null 2>&1
        (cd "${somedir%/*}" && pwd -P)
    fi
}

# Determine where to build, where to install, and how many processes to use.
gui=yes
download=yes
configure=yes
compile=yes
llvm_revision=HEAD
use_byfl=yes
use_dragonegg=yes
use_llvm=yes
destdir=
byfl_branch=llvm-3.5
llvm_branch=tags/RELEASE_352/final
while getopts j:b:r:tdcCD:x:B:L: opt; do
    case $opt in
        j)
            # Parallelism
            numprocs="$OPTARG"
            ;;

        b)
            # Build directory
            builddir="$OPTARG"
            ;;
        r)
            # LLVM/Clang/DragonEgg revision to use
            llvm_revision="$OPTARG"
            ;;
        t)
            # Show progress textually
            gui=no
            ;;
        d)
            # Download only
            download=yes
            compile=no
            ;;
        c)
            # Compile only
            download=no
            compile=yes
            configure=yes
            ;;
        C)
            # Compile only but use the existing configuration
            download=no
            compile=yes
            configure=no
            ;;
        D)
            # Specify an installation prefix that's "invisible" to the
            # installed programs.
            destdir="$OPTARG"
            ;;

        x)
            # Exclude a feature from download/compiling.
            export "use_${OPTARG}"=no
            ;;

        B)
            # Specify a specific branch of Byfl to use.
            byfl_branch="$OPTARG"
            ;;

        L)
            # Specify a specific branch of LLVM/Clang/DragonEgg to use.
            llvm_branch="$OPTARG"
            ;;
    esac
done
shift $((OPTIND-1))
if [ -z "$1" ] ; then
    echo "Usage: $0 [-j <parallelism>] [-r <LLVM revision>] [-b <build_dir>] [-t] [-d | -c] <install_dir>" >&2
    exit 1
fi
if [ -z "$builddir" ] ; then
    builddir=$(mktemp --directory --tmpdir="$(/bin/pwd)" byfl-build.XXXXXX)
fi
builddir=$(abs_dirname "$builddir")
installdir=$(abs_dirname "$1")
if [ -z "$numprocs" ] ; then
    # No parallel-build factor was specified -- guess a good value to use.
    if [ -e /proc/cpuinfo ] ; then
        # Linux -- get the CPU count from /proc/cpuinfo.
        numprocs=$(egrep -c '^processor' /proc/cpuinfo)
    else
        # OS X or other -- disable implicit parallel builds.
        numprocs=1
    fi
fi

# Honor the user's preferred C and C++ compilers.
CC=${CC:-gcc}
CXX=${CXX:-g++}

# Ensure we have a version of GCC that works with DragonEgg.
if [ "$use_dragonegg" = yes ] ; then
    gcc_version=$($CC --version | awk 'NR==1 {sub(/\([^\)]*\)/, ""); print $2}')
    if echo "$gcc_version" | awk '!/^4\.[5-8]\./ {exit 1}' ; then
        :
    else
        echo "${0}: DragonEgg requires GCC version 4.5, 4.6, 4.7, or 4.8; version $gcc_version almost certainly won't work" 1>&2
        exit 1
    fi
    if [ "$($CC -print-file-name=plugin)" = plugin ] ; then
        echo "${0}: DragonEgg requires the GCC plugin development files (e.g., auto-host.h) corresponding to $($CC --version | head -1)" 1>&2
        exit 1
    fi
fi

# Prepare the GUI.
if [ "$gui" = yes ] ; then
    if [ ! "$(type -P stdbuf)" ] ; then
        gui=no
    elif [ ! "$(type -P zenity)" ] ; then
        gui=no
    fi
fi
if [ "$gui" = yes ] ; then
    zproc_PID=""   # Prevent spurious undefined-variable warnings from ShellCheck.
    coproc zproc {
        zenity --progress --title="Byfl installation progress" --auto-kill
    }
    while [ -z "$zenity_pid" ] ; do
        zenity_pid=$(ps | awk '$NF == "zenity" {print $1}')
        sleep 1
    done
    function abend () {
        test -z "$zproc_PID" || kill "$zproc_PID"
        zenity --error --title="Fail" --text="Installation failed."
        exit 1
    }
    trap abend ERR
else
    zproc=(0 1)
fi
exec 4>&"${zproc[1]}"

# Define a function to update a progress bar during command execution
# given a symbolic tag for the run, the expected number of lines of
# output, and a command to run.
function run_with_progress () {
    # Parse our arguments.
    tag="$1"
    shift
    maxlines="$1"
    shift

    # Run the command either with or without the GUI.  Abort on error.
    logfile="$builddir/build-logs/$tag.log"
    echo "\$ $*" > "$logfile"
    if [ "$gui" = yes ] ; then
        # Estimate the number of lines of output we'll see.
        echo 0 1>&4
        "$@" 2>&1 | \
            tee -a "$logfile" | \
            stdbuf -oL awk '{printf "%d\n", 100*NR/MAXLN; print > "/dev/stderr"}' MAXLN="$maxlines" | \
            stdbuf -oL uniq 1>&4
            echo 100 1>&4
    else
        "$@"
    fi
    if [ "${PIPESTATUS[0]}" != 0 ] ; then
        echo "${0}: Execution of \"$*\" failed (${PIPESTATUS[0]})" 1>&2
        false
        exit 1
    fi
}

# Abort on error.
set -o pipefail
set -e

# Switch to our build directory
test -e "$builddir" || mkdir "$builddir"
cd "$builddir"

# Create a subdirectory for logging the script's operation.
rm -rf build-logs
mkdir build-logs

# Download LLVM, Clang, DragonEgg, and Byfl.
if [ "$download" = yes ] ; then
    # Delete old files before downloading the new ones.
    if [ "$use_byfl" = yes ] ; then
        echo "# Removing old versions of Byfl from $builddir" 1>&4
        run_with_progress cleanup-byfl 320 rm -rfv byfl
    fi
    if [ "$use_dragonegg" = yes ] ; then
        echo "# Removing old versions of DragonEgg from $builddir" 1>&4
        run_with_progress cleanup-dregg 970 rm -rfv dragonegg
    fi
    if [ "$use_llvm" = yes ] ; then
        echo "# Removing old versions of LLVM and Clang from $builddir" 1>&4
        run_with_progress cleanup-llvm 62000 rm -rfv llvm
    fi

    # Download LLVM.
    if [ "$use_llvm" = yes ] ; then
        echo "# Downloading LLVM revision $llvm_revision on $llvm_branch into $builddir" 1>&4
        run_with_progress llvm-dl 16000 svn checkout -r "$llvm_revision" "http://llvm.org/svn/llvm-project/llvm/$llvm_branch" llvm
    fi
    pushd llvm
    llvm_revision=$(svn info | awk '/^Revision: / {print $2}')
    popd

    # Download Clang.
    if [ "$use_llvm" = yes ] ; then
        echo "# Downloading Clang revision $llvm_revision into $builddir" 1>&4
        run_with_progress clang-dl 13000 svn checkout -r "$llvm_revision" "http://llvm.org/svn/llvm-project/cfe/$llvm_branch" llvm/tools/clang
    fi

    # Download the Clang run-time system.
    if [ "$use_llvm" = yes ] ; then
        echo "# Downloading Clang RT revision $llvm_revision into $builddir" 1>&4
        run_with_progress rts-dl 1800 svn checkout -r "$llvm_revision" "http://llvm.org/svn/llvm-project/compiler-rt/$llvm_branch" llvm/projects/compiler-rt
    fi

    # Download DragonEgg.
    if [ "$use_dragonegg" = yes ] ; then
        echo "# Downloading DragonEgg revision $llvm_revision into $builddir" 1>&4
        run_with_progress dregg-dl 410 svn checkout -r "$llvm_revision" "http://llvm.org/svn/llvm-project/dragonegg/$llvm_branch" dragonegg
    fi

    # Download Byfl.
    if [ "$use_byfl" = yes ] ; then
        echo "# Downloading Byfl branch $byfl_branch into $builddir" 1>&4
        run_with_progress byfl-dl 2 git clone --branch="$byfl_branch" https://github.com/losalamos/Byfl.git byfl
    fi

    # Say what we did.
    if [ "$use_llvm" = yes -a "$use_dragonegg" = yes -a "$use_byfl" = yes ] ; then
        echo "Downloaded LLVM, Clang, DragonEgg, and Byfl into $builddir."
    else
        echo "Downloaded a subset of LLVM, Clang, DragonEgg, and Byfl into $builddir."
    fi
    if [ "$gui" = yes -a "$compile" = no ] ; then
        kill "$zenity_pid"
        zenity --info --title="Finished downloading" --text="Downloaded LLVM, Clang, DragonEgg,\nand Byfl into $builddir."
    fi
fi

# Compile and install everything we downloaded.
if [ "$compile" = yes ] ; then
    if [ "$use_llvm" = yes ] ; then
        # Configure LLVM and Clang.
        echo "# Configuring LLVM and Clang" 1>&4
        pushd llvm
        if [ $configure = yes -o ! -e config.log ] ; then
            run_with_progress llvm-config 280 ./configure --prefix="$installdir" --enable-optimized --enable-debug-runtime --enable-debug-symbols --disable-assertions CC="$CC" CXX="$CXX" REQUIRES_RTTI=1
        fi

        # Build LLVM and Clang.
        echo "# Compiling LLVM and Clang" 1>&4
        run_with_progress llvm-build 4100 make -j$numprocs

        # Install LLVM and Clang.  Out of the goodness of our heart we also
        # install the Clang static analyzer.
        echo "# Installing LLVM and Clang into $destdir$installdir" 1>&4
        run_with_progress llvm-inst 850 make DESTDIR="$destdir" install
        cp -p tools/clang/tools/scan-view/scan-view "$destdir$installdir/bin/scan-view"
        cp -p tools/clang/tools/scan-build/* "$destdir$installdir/bin/"
        pythondir=$(python -c 'import site; print site.getsitepackages()[0]' | sed "s,.*/lib/,$destdir$installdir/lib/,")
	mkdir -p "$pythondir"
        cp -pr tools/clang/tools/scan-view/* "$pythondir/"
        rm "$pythondir/scan-view"
        popd
    fi
    export PATH="$destdir$installdir/bin:$PATH"

    if [ "$use_dragonegg" = yes ] ; then
        # Build DragonEgg.
        pushd dragonegg
        echo "# Compiling DragonEgg" 1>&4
        run_with_progress dregg-build 320 make -j$numprocs

        # Install DragonEgg.
        echo "# Installing DragonEgg into $destdir$installdir" 1>&4
        run_with_progress dregg-inst 2 cp -v dragonegg.so "$destdir$installdir/lib/"
        popd
    fi

    if [ "$use_byfl" = yes ] ; then
        # Configure Byfl.
        echo "# Configuring Byfl" 1>&4
        cd byfl
        if [ $configure = yes -o ! -e config.log ] ; then
            run_with_progress byfl-autogen 22 autoreconf -v -f -i
        fi
        test -e build || mkdir build
        cd build
        if [ $configure = yes -o ! -e config.log ] ; then
            run_with_progress byfl-config 150 ../configure DRAGONEGG="$installdir/lib/dragonegg.so" --prefix="$installdir"
        fi

        # Build Byfl.
        echo "# Compiling Byfl" 1>&4
        run_with_progress byfl-build 200 make DRAGONEGG="$destdir$installdir/lib/dragonegg.so" -j$numprocs

        # Install Byfl.
        echo "# Installing Byfl into $destdir$installdir" 1>&4
        run_with_progress byfl-inst 220 make DRAGONEGG="$destdir$installdir/lib/dragonegg.so" DESTDIR="$destdir" install
    fi

    # Test the installation
    echo "# Testing the Byfl installation" 1>&4
    test "$gui" = yes && echo 0 1>&4
    cfile=$(mktemp --tmpdir --suffix=.c byfltest-XXXXXX)
    exefile=${cfile%.c}
    cat <<CFILE > $cfile
#include <stdio.h>
int main (void) {
  printf("Hello, world!\n");
  return 0;
}
CFILE
    bf-gcc -bf-libdir="$destdir$installdir/lib" -bf-dragonegg="$destdir$installdir/lib/dragonegg.so" "$cfile" -o "$exefile"
    run_with_progress byfl-test 23 "$exefile"
    rm -f "$cfile" "$exefile"

    # Say what we did.
    echo "Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir."
    echo "It is now safe to delete $builddir."
    if [ "$gui" = yes ] ; then
        kill "$zenity_pid"
        zenity --info --title="Finished installation" --text="Successfully installed LLVM, Clang, DragonEgg, and Byfl into $installdir.\n\nIt is now safe to delete $builddir."
    fi
fi
