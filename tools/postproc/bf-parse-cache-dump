#!/usr/bin/env python
#
# Usage:
#   get-accesses.py <filename> l1size [l2size [l3size]]
#   filename        - name of file to parse for total hit values
#   lNsize          - size of lN cache
#   Multiple levels are optional, but you must specify the smaller cache sizes 
#   to filter before hitting higher levels.

from argparse import ArgumentParser,FileType
import math

parser = ArgumentParser(description='Process a Byfl cache dump to get access counts.')
parser.add_argument('--sets', nargs='*', type=int, 
                    help='List of number of sets.')
parser.add_argument('--sizes', nargs='*', type=str, 
                    help='List of cache sizes.')
parser.add_argument('filename', type=FileType('r'), default='-', nargs='?',
                    help='Path to filename for processing.')

args = vars(parser.parse_args())

lines = args['filename'].readlines()
#total hits
total = int(lines[0].split()[3])
#cold misses
cold = int(lines[1].split()[2])
#line size
line_size = int(lines[4].split()[0])

sets = [int(math.log(set, 2)) for set in args['sets']]
accesses = [total]
for size, set in zip(map(int,args['sizes']), sets):
    try:
        # get this line only, disregarding cache size
        line = [int(x) for x in lines[int(size / line_size) + 3].split()][1:]
        val = line[set]
    except KeyError:
        val = total - cold
    accesses.append(val)

print "\t".join([str(access) for access in accesses])
