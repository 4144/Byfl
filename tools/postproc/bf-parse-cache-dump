#!/usr/bin/env python
#
# Usage:
#   get-accesses.py <filename> l1size [l2size [l3size]]
#   filename        - name of file to parse for total hit values
#   lNsize          - size of lN cache
#   Multiple levels are optional, but you must specify the smaller cache sizes 
#   to filter before hitting higher levels.

from argparse import ArgumentParser,FileType
import math

parser = ArgumentParser(description='Process a Byfl cache dump to get access counts.')
parser.add_argument('--sizes', nargs='*', type=str, 
                    help='List of cache sizes.')
parser.add_argument('filename', type=FileType('r'), default='-', nargs='?',
                    help='Path to filename for processing.')

args = vars(parser.parse_args())

lines = args['filename'].readlines()
#total hits
total = int(lines[0].split()[3])
#cold misses
cold = int(lines[1].split()[2])
#line size
line_size = int(lines[3].split()[2])

# get all distance->count pairings in order
vals = sorted([map(int, line.split()) for line in lines[5:]], 
              key=lambda x: x[0])

accesses = [total]
for size in map(int, args['sizes']):
    distance = int(size / line_size)
    cur_accesses = 0
    for (dist, count) in [val for val in vals if val[0] <= distance]:
        cur_accesses = cur_accesses + count
    accesses.append(total - cur_accesses)

print "\t".join([str(access) for access in accesses])
