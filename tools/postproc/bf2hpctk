#! /usr/bin/env perl

###############################################
# Convert the BYFL_FUNC lines from bytesflops #
# output into suitable input for HPCToolkit's #
# GUI, hpcviewer                              #
#                                             #
# By Scott Pakin <pakin@lanl.gov>             #
###############################################

use Cwd qw(abs_path);
use File::Basename;
use File::Copy::Recursive qw(fcopy);
use File::Spec;
use Getopt::Long;
use warnings;
use strict;

# Define some global variables.
my $progname = basename $0;    # Name of this program
my $exe_name;         # Name of the executable that produced the data
my $exe_basename;     # Base name of the above (no directory name)
my $byfl_output;      # File containing BYFL output lines
my %fname2addr;       # Map from a function name to its starting address
my $data_trie;        # All function data organized in a trie structure
my @columntags;       # Name of each column of data (from BYFL_FUNC_HEADER)
my $numdatafields = 0;  # Number of data fields (as opposed to call-stack fields) in the above
my $dbdirname;        # Name of the database directory
my $next_id = 1000;   # Next ID number to allocate for an XML entity
my %fname2id;         # Map from a filename to a unique ID
my %func2id;          # Map from a function name to a unique ID
my $usagestr = "Usage: $progname <executable name> <bytesflops output>\n";

# Define a map from each possible column tag to its description.
my %tag2desc = (
    LD_bytes    => "Bytes loaded",
    ST_bytes    => "Bytes stored",
    LD_ops      => "Load operations",
    ST_ops      => "Store operations",
    Flops       => "Floating-point operations",
    FP_bits     => "Floating-point operation bits",
    Int_ops     => "Integer operations (unary + binary)",
    Int_op_bits => "Integer operation bits",
    Uniq_bytes  => "Unique bytes (loads + stores)",
    Cond_brs    => "Conditional or indirect branches",
    Invocations => "Function invocations");

# Define a subroutine that maps a function name to a triple of
# {demangled name, filename, line number}.
my %previous_function_location;     # Memoization of find_function_location's results
sub find_function_location ($) {
    # Check if we've already seen this function name.
    my $funcname = $_[0];
    my $prev_result = $previous_function_location{$funcname};
    return @$prev_result if defined $prev_result;

    # Run external utilities to find where the function is defined.
    # Return a dummy location if any error occurs.
    my $longfuncname = $funcname;
    my ($filename, $lineno) = ("??", 0);
    do {
        # Use c++filt to demangle C++ names.
        if (substr($funcname, 0, 2) eq "_Z" || substr($funcname, 0, 9) eq "_GLOBAL__") {
            open(CPPFILT, "c++filt $funcname|") || die "open: $!\n";
            chomp($longfuncname = <CPPFILT>);
            close CPPFILT or last;
        }

        # Find the function's filename and line number using addr2line.
        my $address = $fname2addr{$funcname};
        if (!defined $address) {
            warn "${progname}: Failed to find $funcname in $exe_name\n";
        }
        else {
            # Get the filename and line number.
            open(A2L, "addr2line --exe=$exe_name $address|") || die "open: $!\n";
            chomp(my $oneline = <A2L>);
            die "${progname}: Failed to parse addr2line's output ($oneline)\n" if $oneline !~ /^([^:]+):(\?|\d+)/;
            ($filename, $lineno) = ($1, $2);
            $lineno = 0 if $lineno eq "?";
            close A2L;
        }
    };
    if ($filename ne "??") {
        my $absname = abs_path $filename;   # Accesses the filesystem
        $absname = File::Spec->rel2abs($filename) if !defined $absname;  # Does not access the filesystem
        $filename = $absname;
    }
    my @result = ($longfuncname, $filename, $lineno);
    $previous_function_location{$funcname} = \@result;
    return @result;
}

# Define a function that replaces characters that aren't allowed in strings.
sub xmlify ($) {
    my $xml = $_[0];
    $xml =~ s/\&/\&amp;/g;
    $xml =~ s/</\&lt;/g;
    $xml =~ s/>/\&gt;/g;
    return $xml;
}

# Define the entire XML header boilerplate (primarily the XML DTD) as
# a single string.
my $xml_header_boilerplate = <<'END_DTD';
<?xml version="1.0"?>
<!DOCTYPE HPCToolkitExperiment [
<!-- ******************************************************************** -->
<!-- HPCToolkit Experiment DTD                                            -->
<!-- Version 2.0                                                          -->
<!-- ******************************************************************** -->
<!ELEMENT HPCToolkitExperiment (Header, (SecCallPathProfile|SecFlatProfile)*)>
<!ATTLIST HPCToolkitExperiment
          version CDATA #REQUIRED>

  <!-- ****************************************************************** -->

  <!-- Info/NV: flexible name-value pairs: (n)ame; (t)ype; (v)alue -->
  <!ELEMENT Info (NV*)>
  <!ATTLIST Info
            n CDATA #IMPLIED>
  <!ELEMENT NV EMPTY>
  <!ATTLIST NV
            n CDATA #REQUIRED
            t CDATA #IMPLIED
            v CDATA #REQUIRED>

  <!-- ****************************************************************** -->
  <!-- Header                                                             -->
  <!-- ****************************************************************** -->
  <!ELEMENT Header (Info*)>
  <!ATTLIST Header
            n CDATA #REQUIRED>

  <!-- ****************************************************************** -->
  <!-- Section Header                                                     -->
  <!-- ****************************************************************** -->
  <!ELEMENT SecHeader (MetricTable?, MetricDBTable?, TraceDBTable?, LoadModuleTable?, FileTable?, ProcedureTable?, Info*)>

    <!-- MetricTable: -->
    <!ELEMENT MetricTable (Metric)*>

    <!-- Metric: (i)d; (n)ame -->
    <!--   (v)alue-type: transient type of values -->
    <!--   (t)ype: persistent type of metric -->
    <!--   fmt: format; show; -->
    <!ELEMENT Metric (MetricFormula*, Info?)>
    <!ATTLIST Metric
              i            CDATA #REQUIRED
              n            CDATA #REQUIRED
              v            (raw|final|derived-incr|derived) "raw"
              t            (inclusive|exclusive|nil) "nil"
              partner      CDATA #IMPLIED
              fmt          CDATA #IMPLIED
              show         (1|0) "1"
              show-percent (1|0) "1">

    <!-- MetricFormula represents derived metrics: (t)ype; (frm): formula -->
    <!ELEMENT MetricFormula (Info?)>
    <!ATTLIST MetricFormula
              t   (combine|finalize) "finalize"
              i   CDATA #IMPLIED
              frm CDATA #REQUIRED>

    <!-- Metric data, used in sections: (n)ame [from Metric]; (v)alue -->
    <!ELEMENT M EMPTY>
    <!ATTLIST M
              n CDATA #REQUIRED
              v CDATA #REQUIRED>

    <!-- MetricDBTable: -->
    <!ELEMENT MetricDBTable (MetricDB)*>

    <!-- MetricDB: (i)d; (n)ame -->
    <!--   db-glob:        file glob describing files in metric db -->
    <!--   db-id:          id within metric db -->
    <!--   db-num-metrics: number of metrics in db -->
    <!--   db-header-sz:   size (in bytes) of a db file header -->
    <!ELEMENT MetricDB EMPTY>
    <!ATTLIST MetricDB
              i              CDATA #REQUIRED
              n              CDATA #REQUIRED
              db-glob        CDATA #IMPLIED
              db-id          CDATA #IMPLIED
              db-num-metrics CDATA #IMPLIED
              db-header-sz   CDATA #IMPLIED>

    <!-- TraceDBTable: -->
    <!ELEMENT TraceDBTable (TraceDB)>

    <!-- TraceDB: (i)d -->
    <!--   db-min-time: min beginning time stamp (global) -->
    <!--   db-max-time: max ending time stamp (global) -->
    <!ELEMENT TraceDB EMPTY>
    <!ATTLIST TraceDB
              i            CDATA #REQUIRED
              db-glob      CDATA #IMPLIED
              db-min-time  CDATA #IMPLIED
              db-max-time  CDATA #IMPLIED
              db-header-sz CDATA #IMPLIED>

    <!-- LoadModuleTable assigns a short name to a load module -->
    <!ELEMENT LoadModuleTable (LoadModule)*>

    <!ELEMENT LoadModule (Info?)>
    <!ATTLIST LoadModule
              i CDATA #REQUIRED
              n CDATA #REQUIRED>

    <!-- FileTable assigns a short name to a file -->
    <!ELEMENT FileTable (File)*>

    <!ELEMENT File (Info?)>
    <!ATTLIST File
              i CDATA #REQUIRED
              n CDATA #REQUIRED>

    <!-- ProcedureTable assigns a short name to a procedure -->
    <!ELEMENT ProcedureTable (Procedure)*>

    <!ELEMENT Procedure (Info?)>
    <!ATTLIST Procedure
              i CDATA #REQUIRED
              n CDATA #REQUIRED>

  <!-- ****************************************************************** -->
  <!-- Section: Call path profile                                         -->
  <!-- ****************************************************************** -->
  <!ELEMENT SecCallPathProfile (SecHeader, SecCallPathProfileData)>
  <!ATTLIST SecCallPathProfile
            i CDATA #REQUIRED
            n CDATA #REQUIRED>

    <!ELEMENT SecCallPathProfileData (PF|M)*>
      <!-- Procedure frame -->
      <!--   (i)d: unique identifier for cross referencing -->
      <!--   (s)tatic scope id -->
      <!--   (n)ame: a string or an id in ProcedureTable -->
      <!--   (lm) load module: a string or an id in LoadModuleTable -->
      <!--   (f)ile name: a string or an id in LoadModuleTable -->
      <!--   (l)ine range: "beg-end" (inclusive range) -->
      <!--   (a)lien: whether frame is alien to enclosing P -->
      <!--   (v)ma-range-set: "{[beg-end), [beg-end)...}" -->
      <!ELEMENT PF (PF|Pr|L|C|S|M)*>
      <!ATTLIST PF
                i  CDATA #IMPLIED
                s  CDATA #IMPLIED
                n  CDATA #REQUIRED
                lm CDATA #IMPLIED
                f  CDATA #IMPLIED
                l  CDATA #IMPLIED
                v  CDATA #IMPLIED>
      <!-- Procedure (static): GOAL: replace with 'P' -->
      <!ELEMENT Pr (Pr|L|C|S|M)*>
      <!ATTLIST Pr
                i  CDATA #IMPLIED
                s  CDATA #IMPLIED
                n  CDATA #REQUIRED
                lm CDATA #IMPLIED
                f  CDATA #IMPLIED
                l  CDATA #IMPLIED
                a  (1|0) "0"
                v  CDATA #IMPLIED>
      <!-- Callsite (a special StatementRange) -->
      <!ELEMENT C (PF|M)*>
      <!ATTLIST C
                i CDATA #IMPLIED
                s CDATA #IMPLIED
                l CDATA #IMPLIED
                v CDATA #IMPLIED>

  <!-- ****************************************************************** -->
  <!-- Section: Flat profile                                              -->
  <!-- ****************************************************************** -->
  <!ELEMENT SecFlatProfile (SecHeader, SecFlatProfileData)>
  <!ATTLIST SecFlatProfile
            i CDATA #REQUIRED
            n CDATA #REQUIRED>

    <!ELEMENT SecFlatProfileData (LM|M)*>
      <!-- Load module: (i)d; (n)ame; (v)ma-range-set -->
      <!ELEMENT LM (F|P|M)*>
      <!ATTLIST LM
                i CDATA #IMPLIED
                n CDATA #REQUIRED
                v CDATA #IMPLIED>
      <!-- File -->
      <!ELEMENT F (P|L|S|M)*>
      <!ATTLIST F
                i CDATA #IMPLIED
                n CDATA #REQUIRED>
      <!-- Procedure (Note 1) -->
      <!ELEMENT P (P|A|L|S|C|M)*>
      <!ATTLIST P
                i CDATA #IMPLIED
                n CDATA #REQUIRED
                l CDATA #IMPLIED
                v CDATA #IMPLIED>
      <!-- Alien (Note 1) -->
      <!ELEMENT A (A|L|S|C|M)*>
      <!ATTLIST A
                i CDATA #IMPLIED
                f CDATA #IMPLIED
                n CDATA #IMPLIED
                l CDATA #IMPLIED
                v CDATA #IMPLIED>
      <!-- Loop (Note 1,2) -->
      <!ELEMENT L (A|Pr|L|S|C|M)*>
      <!ATTLIST L
                i CDATA #IMPLIED
                s CDATA #IMPLIED
                l CDATA #IMPLIED
                v CDATA #IMPLIED>
      <!-- Statement (Note 2) -->
      <!--   (it): trace record identifier -->
      <!ELEMENT S (S|M)*>
      <!ATTLIST S
                i  CDATA #IMPLIED
                it CDATA #IMPLIED
                s  CDATA #IMPLIED
                l  CDATA #IMPLIED
                v  CDATA #IMPLIED>
      <!-- Note 1: Contained Cs may not contain PFs -->
      <!-- Note 2: The 's' attribute is not used for flat profiles -->
]>
END_DTD
    ;

###########################################################################

# Define a class that represents a trie, which we use to associate
# call paths with measurement data.
package Trie;

# Construct a new Trie object.
sub new ($) {
    # Construct ourself.
    my $this = shift;
    my $class = ref($this) || $this;
    my $self = {};
    bless $self, $class;

    # Create an empty list of children and an empty set of data.
    $self->{children} = {};
    $self->{data} = [];
    return $self;
}


# Insert a call path and its data into the trie.
sub insert ($$$) {
    my $self = shift;
    my @string = @{$_[0]};
    my $data = $_[1];
    if (!@string) {
        # Leaf
        $self->{data} = $data;
    }
    else {
        # Internal node
        my $nodename = pop @string;
        $self->{children}->{$nodename} = new Trie() if !defined $self->{children}->{$nodename};
        my $child = $self->{children}->{$nodename};
        $child->insert(\@string, $data);
    }
}

# Define a private helper function for walk.  It takes an expanded
# list of user functions and a node name as arguments.
sub walkhelper ($$$$$) {
    my $self = shift;
    my ($depth, $name, $before, $at, $after) = @_;
    $at->($self, $depth, $name) if defined $at;
    foreach my $childname (sort keys %{$self->{children}}) {
        my $childtrie = $self->{children}->{$childname};
        $before->($childtrie, $depth+1, $childname) if defined $before;
        $childtrie->walkhelper($depth+1, $childname, $before, $at, $after);
        $after->($childtrie, $depth+1, $childname) if defined $after;
    }
}

# Walk the trie in depth-first order, calling provided functions
# before, at, and after each node.
sub walk ($%) {
    my $self = shift;
    my %userfuncs = @_;
    $self->walkhelper(0, undef, $userfuncs{before}, $userfuncs{at}, $userfuncs{after});
}

# Given a tree depth and a node name, dump the trie (used for debugging).
sub dump ($$$) {
    my $self = shift;

    $self->walk(at => sub ($$$) {
        my ($node, $depth, $name) = @_;
        return if !defined $name;
        printf "%s%s [%s]\n", " " x ($depth*2-2), $name, join(" ", @{$node->{data}});
    });
}

package main;

###########################################################################

# Parse the command line.
GetOptions("o|output|db=s" => \$dbdirname)
    or die $usagestr;
die $usagestr if $#ARGV != 1;
$exe_name = $ARGV[0];
$byfl_output = $ARGV[1];
$exe_basename = basename $exe_name;
if (!defined $dbdirname) {
    $dbdirname = sprintf "hpctoolkit-%s-database", $exe_basename;
}

# Construct a map of function names to addresses.
open(NM, "nm $exe_name|") || die "open(\"$exe_name\"): $!\n";
while (my $oneline = <NM>) {
    chomp $oneline;
    next if $oneline !~ /^([0-9a-f]+) [Tt] (\w+)$/;
    $fname2addr{$2} = $1;
}
close NM;

# Read the entire file, converting each BYFL_FUNC line into a trie node.
$data_trie = new Trie();
open(BYFL, "<$byfl_output") || die "open(\"$byfl_output\"): $!\n";
while (my $oneline = <BYFL>) {
    # Process the header line.
    if (substr($oneline, 0, 17) eq "BYFL_FUNC_HEADER:") {
        chomp $oneline;
        @columntags = split " ", $oneline;
        shift @columntags;    # Drop the "BYFL_FUNC_HEADER:" tag.
        foreach my $tag (@columntags) {
            last if $tag =~ /^(Function|Parent_func_\d+)$/o;
            $numdatafields++;
        }
        die "${progname}: Program was not instrumented with -bf-by-func\n" if $numdatafields == @columntags;
        next;
    }

    # Process each data line.
    next if substr($oneline, 0, 10) ne "BYFL_FUNC:";
    chomp $oneline;
    my @rawdata = split " ", $oneline;
    shift @rawdata;           # Drop the "BYFL_FUNC:" tag.
    my @data = @rawdata[0 .. $numdatafields-1];
    my @call_path = @rawdata[$numdatafields .. $#rawdata];
    $data_trie->insert(\@call_path, \@data);
}

# Create a database directory and populate it with all of the source
# files that are referenced by the executable program.
$File::Copy::Recursive::KeepMode = 0;
$File::Copy::Recursive::CopyLink = 0;
$File::Copy::Recursive::DirPerms = 0755;
$data_trie->walk(at => sub ($$$) {
        my ($node, $depth, $name) = @_;
        return if !defined $name;
        my $filename = (find_function_location($name))[1];
        return if $filename eq "??";
        my $targetfname = File::Spec->catfile($dbdirname, "src", $filename);
        fcopy($filename, $targetfname) if !-e $targetfname;
                 });

# Create an experiment.xml file and write the first set of header
# information to it.
my $exp_xml_name = File::Spec->catfile($dbdirname, "experiment.xml");
open(XML, ">", $exp_xml_name) || die "open(\"$exp_xml_name\"): $!\n";
print XML $xml_header_boilerplate;
print XML <<"HEADER_1";
<HPCToolkitExperiment version="2.0">
  <Header n="$exe_basename">
    <Info/>
  </Header>
  <SecCallPathProfile i="0" n="$exe_basename">
    <SecHeader>
HEADER_1
    ;

# Write all of our data columns as an XML metric table.
print XML "      <MetricTable>\n";
foreach my $tagnum (0 .. $numdatafields-1) {
    my $tag = $columntags[$tagnum];
    printf XML '        <Metric i="%d" n="%s" v="raw" t="nil" show="1" show-percent="0">', $tagnum, $tag2desc{$tag};
    print XML '
          <Info>
            <NV n="units" v="events"/>
            <NV n="period" v="1"/>
          </Info>
        </Metric>
';
}
print XML "      </MetricTable>";

# Write some boilerplate as an XML load module table.
my $loadmodule = $next_id++;
printf XML '
      <LoadModuleTable>
        <LoadModule i="%d" n="%s"/>
      </LoadModuleTable>
', $loadmodule, abs_path $exe_name;

# Assign a unique ID to each file the executable references and write
# an XML file table.
print XML "      <FileTable>\n";
$data_trie->walk(at => sub ($$$) {
        my ($node, $depth, $name) = @_;
        return if !defined $name;
        my $filename = (find_function_location($name))[1];
        if ($filename eq "??") {
            my $unknown_fname = "UNKNOWN($name)";
            return if defined $fname2id{$unknown_fname};
            printf XML '        <File i="%d" n="~unknown-file~"/><!-- %s -->%s', $next_id, $name, "\n";
            $fname2id{$unknown_fname} = $next_id++;
        }
        else {
            return if defined $fname2id{$filename};
            printf XML '        <File i="%d" n="./src%s"/>%s', $next_id, $filename, "\n";
            $fname2id{$filename} = $next_id++;
        }
                 });
print XML "      </FileTable>\n";

# Assign a unique ID to each function the executable references and write
# an XML procedure table.
print XML "      <ProcedureTable>\n";
$data_trie->walk(at => sub ($$$) {
        my ($node, $depth, $name) = @_;
        return if !defined $name;
        my $funcname = (find_function_location($name))[0];
        return if defined $func2id{$funcname};
        printf XML '        <Procedure i="%d" n="%s"/>%s', $next_id, xmlify($funcname), "\n";
        $func2id{$funcname} = $next_id++;
                 });
print XML "      </ProcedureTable>\n";
print XML "      <Info/>\n";
print XML "    </SecHeader>\n";

# Walk the data trie, outputting all of the data it contains.
print XML "    <SecCallPathProfileData>\n";
$data_trie->walk(before => sub ($$$) {
                     # Output an XML procedure frame representing the
                     # current function.
                     my ($node, $depth, $name) = @_;
                     return if !defined $name;
                     my ($funcname, $filename, $lineno) = find_function_location($name);
                     my $func_id = $func2id{$funcname};
                     my $fname_id = $fname2id{$filename};
                     $fname_id = $fname2id{"UNKNOWN($name)"} if !defined $fname_id;
                     printf XML '%s<PF i="%d" s="%d" l="%d" lm="%d" f="%d" n="%d">%s', "  " x ($depth+2), $next_id++, $next_id++, $lineno, $loadmodule, $fname_id, $func_id, "\n";
                 },

                 at => sub ($$$) {
                     # Output an XML statement and its data.
                     my ($node, $depth, $name) = @_;
                     return if !defined $name;
                     my (undef, $filename, $lineno) = find_function_location($name);
                     printf XML '%s<S i="%d" s="%d" l="%d">%s', "  " x ($depth+3), $next_id, $next_id, $lineno, "\n";
                     $next_id++;
                     if ($#{$node->{data}} == -1) {
                         # We sometimes encounter functions called ex nihilo,
                         # i.e., a function that is never encountered by Byfl
                         # even though its children are.  In this case, we
                         # assign all zeroes to the data to avoid accessing
                         # uninitialized values.
                         $node->{data} = [(0) x $numdatafields];
                     }
                     foreach my $col (0 .. $numdatafields-1) {
                         printf XML '%s<M n="%d" v="%d"/>%s', "  " x ($depth+4), $col, $node->{data}->[$col], "\n";
                     }
                     printf XML "%s</S>\n", "  " x ($depth+3);
                 },

                 after => sub ($$$) {
                     my ($node, $depth, $name) = @_;
                     return if !defined $name;
                     printf XML "%s</PF>\n", "  " x ($depth+2);
                 });
print XML "    </SecCallPathProfileData>\n";

# Close the experiment.xml file and exit.
print XML "  </SecCallPathProfile>\n";
print XML "</HPCToolkitExperiment>\n";
close XML;
